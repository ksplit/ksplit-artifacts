--- msr_autogen.idl	2022-04-15 13:56:17.326306100 -0600
+++ msr_manual.idl	2022-04-15 13:57:15.811640073 -0600
@@ -1,89 +1,106 @@
 // Sync stubs for boundary functions
 module kernel {
-rpc projection ret_class*  __class_create( projection module  *owner, char  *name, projection lock_class_key  *key ) {
+rpc projection ret_class [alloc(caller)] *  __class_create( projection module [alloc(callee)] *  owner, string [alloc(callee)]*  name, projection lock_class_key [alloc(callee)] *  key ) {
 	projection < struct class > ret_class {
-		char* [out] name;
+		string [alloc(caller), out]  *name;
 	}
 	projection < struct module > module {
 	}
 	projection < struct lock_class_key > lock_class_key {
 	}
 }
-rpc int  __register_chrdev( unsigned int  major, unsigned int  baseminor, unsigned int  count, string   *name, projection _global_file_operations [in] fops ) {
+rpc int  __register_chrdev( unsigned int  major, unsigned int  baseminor, unsigned int  count, string [alloc(callee)] *  name, const projection _global_file_operations [alloc(callee)] * fops ) {
 }
-rpc void  __unregister_chrdev( unsigned int  major, unsigned int  baseminor, unsigned int  count, char [unused] *name ) {
+rpc void  __unregister_chrdev( unsigned int  major, unsigned int  baseminor, unsigned int  count, string * [unused] name ) {
 }
 rpc bool  capable( int  cap ) {
 }
 rpc void  class_destroy( projection class [in] *cls ) {
 	projection < struct class > class {
-		char* [in] name;
+		//char* [in] name;
 	}
 }
 rpc void  cpu_maps_update_begin(  ) {
 }
 rpc void  cpu_maps_update_done(  ) {
 }
-rpc projection ret_device*  device_create( projection class  *class, projection device  *parent, unsigned int  devt, void  *drvdata, char  *fmt ) {
+rpc_ptr array<char, null> [alloc(caller)] * devnode( projection device [alloc(callee)] *dev, unsigned short * [unused] mode ) {
+	projection <struct device> device {
+		unsigned int devt;
+	}
+}
+
+rpc projection ret_device [bind(caller)] *  device_create( projection class*  class, projection device [alloc(callee)] *  parent, unsigned int  devt, void*  [unused] drvdata, string [alloc(callee)] * fmt, u32 cpu) {
 	projection < struct device > ret_device {
 	}
 	projection < struct class > class {
+		rpc_ptr devnode  devnode;
 	}
 	projection < struct device > device {
 	}
 }
-rpc void  device_destroy( projection class [in] *class, unsigned int [unused] devt ) {
+rpc void  device_destroy( projection class* [in] class, unsigned int [unused] devt ) {
 	projection < struct class > class {
-		char* [in] name;
+		//char* [in] name;
 	}
 }
-rpc int  rdmsr_safe_on_cpu( unsigned int  cpu, unsigned int  msr_no, unsigned int [out] *l, unsigned int [out] *h ) {
-}
-rpc int  rdmsr_safe_regs_on_cpu( unsigned int  cpu, unsigned int  *regs ) {
+rpc int rdmsr_safe_on_cpu( unsigned int cpu, unsigned int msr_no, unsigned int [alloc(callee), out] * l, unsigned int [alloc(callee), out] * h ) {
 }
-rpc void  warn_slowpath_fmt( char  *file, int  line, char  *fmt ) {
+rpc int rdmsr_safe_regs_on_cpu( unsigned int cpu, array<unsigned int, 8> [alloc(callee), in, out] * regs ) {
 }
+/*rpc void  warn_slowpath_fmt( char*  file, int  line, char*  fmt ) {
+}*/
 rpc int  wrmsr_safe_on_cpu( unsigned int  cpu, unsigned int  msr_no, unsigned int  l, unsigned int  h ) {
 }
-rpc int  wrmsr_safe_regs_on_cpu( unsigned int  cpu, unsigned int  *regs ) {
+rpc int wrmsr_safe_regs_on_cpu( unsigned int cpu, array<unsigned int, 8> [alloc(callee), in, out] *regs ) {
+}
+rpc long long no_seek_end_llseek( projection file * file, long long offset, int  whence ) {
+	projection < struct file > file {
+		unsigned int [in] f_mode;
+		u64 [in,out] f_pos;
+		u64 [out] f_version;
+	}
 }
-rpc u64  no_seek_end_llseek( projection file [in] *file, u64  offset, int  whence ) {
+
+rpc_ptr s64 llseek( projection file [alloc(callee)] * file, s64  offset, int  whence ) {
 	projection < struct file > file {
 		unsigned int [in] f_mode;
 		u64 [in,out] f_pos;
 		u64 [out] f_version;
 	}
+
 }
-rpc_ptr u64  msr_read( projection file [in] *file, char [in,user<{{8}}>] *buf, u64  count, u64 [in] *ppos ) {
+
+rpc_ptr u64  msr_read( projection file [alloc(callee)] * file, array<char, {{count}}> [alloc(callee), in, out] *buf, u64  count, u64 [alloc(callee)] * ppos ) {
 	projection < struct file > file {
-		projection file_inode* f_inode;
+		projection file_inode [alloc(callee)]* f_inode;
 	}
 	projection < struct inode > file_inode {
 		unsigned int [in] i_rdev;
 	}
 }
-rpc_ptr u64  msr_write( projection file [in] *file, char [in,user<{{8}}>] *buf, u64  count, u64 [in] *ppos ) {
+rpc_ptr u64  msr_write( projection file [alloc(callee)] * file, array<char, {{count}}> [alloc(callee), in, out] *buf, u64  count, u64 [alloc(callee)]* ppos ) {
 	projection < struct file > file {
-		projection file_inode* f_inode;
+		projection file_inode [alloc(callee)]* f_inode;
 	}
 	projection < struct inode > file_inode {
 		unsigned int [in] i_rdev;
 	}
 }
-rpc_ptr u64  msr_ioctl( projection file [in] *file, unsigned int  ioc, u64  arg ) {
+rpc_ptr u64  msr_ioctl( projection file [alloc(callee)] * file, unsigned int  ioc, u64  arg ) {
 	projection < struct file > file {
-		projection file_inode* f_inode;
+		projection file_inode [alloc(callee)]* f_inode;
 		unsigned int [in] f_mode;
 	}
 	projection < struct inode > file_inode {
 		unsigned int [in] i_rdev;
 	}
 }
-rpc_ptr int  msr_open( projection inode [unused] *inode, projection file [in] *file ) {
+rpc_ptr int  msr_open( projection inode [alloc(callee)] * inode, projection file [alloc(callee)] * file ) {
 	projection < struct inode > inode {
 	}
 	projection < struct file > file {
-		projection file_inode* f_inode;
+		projection file_inode [alloc(callee)]* f_inode;
 	}
 	projection < struct inode > file_inode {
 		unsigned int [in] i_rdev;
@@ -95,8 +112,8 @@
 	rpc_ptr msr_open open;
 	rpc_ptr msr_read read;
 	rpc_ptr msr_write write;
-	rpc_ptr no_seek_end_llseek llseek;
+	rpc_ptr llseek llseek;
 }
-
-
+	rpc unsigned long get_jiffies() {
+	}
 }
